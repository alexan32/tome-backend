service: ${self:provider.stackName}

frameworkVersion: '3'

plugins:
  - serverless-iam-roles-per-function
  - serverless-python-requirements

provider:
  name: aws
  region: us-east-1
  stage: ${opt:stage, 'dev'}
  stackName: tome-backend-${opt:stage, 'dev'}
  deploymentMethod: direct
  runtime: python3.11
  config: ${file(./config/${opt:stage, 'dev'}.yml)}	
  httpApi:
    cors: true

custom:
  env: ${self:provider.config.env}
  prefix: tome-${self:custom.env}
  characterTable: ${self:custom.prefix}-characterTable
  gameTable: ${self:custom.prefix}-gameTable
  pythonRequirements:
    useStaticCache: false
    useDownloadCache: false
    noDeploy: []
    slim: true
    layer:
      compatibleRuntimes:
        - python3.11

package:
  individually: true
  patterns:
    - '!./**'
  
functions:

  characterService:
    name: ${self:custom.prefix}-characterService
    description: GET and PUT access to the characters table
    handler: lambdas/characterService.lambda_handler
    events:
    - httpApi:
        path: /characterservice/character
        method: GET
    - httpApi:
        path: /characterservice/health
        method: GET
    - httpApi:
        path: /characterservice/character
        method: PUT
    layers: 
      - !Ref PythonRequirementsLambdaLayer
    package:
      patterns:
        - lambdas/characterService.py
        - lambdas/utils.py
    timeout: 6
    memorySize: 128
    environment:
      LOG_LEVEL: logging.INFO
      CHARACTER_TABLE: ${self:custom.characterTable}
    iamRoleStatementsName: ${self:custom.prefix}-characterService-role
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:*
        Resource: 
          - arn:aws:dynamodb:${self:provider.config.region}:${self:provider.config.account}:table/${self:custom.characterTable}
          - arn:aws:dynamodb:${self:provider.config.region}:${self:provider.config.account}:table/${self:custom.characterTable}/*


  gameService:
    name: ${self:custom.prefix}-gameService
    description: tome endpoint for managing game data
    handler: lambdas/gameService.lambda_handler
    events:
    - httpApi:
        path: /gameservice/health
        method: GET
    - httpApi:
        path: /gameservice/game
        method: GET
    - httpApi:
        path: /gameservice/game
        method: PUT
    - httpApi:
        path: /gameservice/participant
        method: PUT
    - httpApi:
        path: /gameservice/participant
        method: DELETE
    layers: 
      - !Ref PythonRequirementsLambdaLayer
    package:
      patterns:
        - lambdas/gameService.py
        - lambdas/utils.py
    timeout: 6
    memorySize: 128
    environment:
      LOG_LEVEL: logging.INFO
      CHARACTER_TABLE: ${self:custom.characterTable}
      GAME_TABLE: ${self:custom.gameTable}
    iamRoleStatementsName: ${self:custom.prefix}-gameService-role
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:*
        Resource: 
          - arn:aws:dynamodb:${self:provider.config.region}:${self:provider.config.account}:table/${self:custom.gameTable}
          - arn:aws:dynamodb:${self:provider.config.region}:${self:provider.config.account}:table/${self:custom.gameTable}/*

# you can add CloudFormation resource templates here
resources:
  Resources:
    characterTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.characterTable}
        AttributeDefinitions:
          - AttributeName: characterId
            AttributeType: S
          - AttributeName: participant
            AttributeType: S
        KeySchema:
          - AttributeName: characterId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: participant-index
            KeySchema:
              - AttributeName: participant
                KeyType: HASH
              - AttributeName: characterId
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    gameTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.gameTable}
        AttributeDefinitions:
          - AttributeName: guildId
            AttributeType: S
          - AttributeName: ownerId
            AttributeType: S
        KeySchema:
          - AttributeName: guildId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: owner-index
            KeySchema:
              - AttributeName: ownerId
                KeyType: HASH
              - AttributeName: guildId
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
